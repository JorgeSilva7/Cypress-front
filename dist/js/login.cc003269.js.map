{"version":3,"file":"js/login.cc003269.js","mappings":"8IACOA,MAAM,UAAUC,MAAA,qC,6GAArBC,EAAAA,EAAAA,IAoCM,MApCNC,EAoCM,EAnCJC,EAAAA,EAAAA,IAkCSC,EAAA,CAlCAC,SAAQC,EAAAD,SAAWE,QAAOD,EAAAC,QAASR,MAAM,e,mBAChD,iBASE,EATFI,EAAAA,EAAAA,IASEK,EAAA,CARAC,IAAI,cACJC,OAAA,G,WACSJ,EAAAK,M,qDAAAL,EAAAK,MAAKC,CAAA,GACdC,MAAM,QACNC,KAAK,QACL,gBACAC,KAAK,QACJC,MAAK,UAAIC,GAAG,OAAMA,GAAOA,EAAIC,OAAS,GAAH,4B,gCAGtCf,EAAAA,EAAAA,IAUEK,EAAA,CATAC,IAAI,iBACJC,OAAA,GACAK,KAAK,W,WACIT,EAAAa,S,qDAAAb,EAAAa,SAAQP,CAAA,GACjBC,MAAM,WACN,gBACCG,MAAK,UAAgBC,GAAG,OAAS,OAAHA,GAAmB,KAAHA,GAAG,+B,gCAKpDG,EAAAA,EAAAA,GASM,aARJjB,EAAAA,EAAAA,IAAwEkB,EAAA,CAAjEC,GAAG,eAAeT,MAAM,SAASE,KAAK,SAASQ,MAAM,aAC5DpB,EAAAA,EAAAA,IAMEkB,EAAA,CALAR,MAAM,QACNE,KAAK,QACLQ,MAAM,UACNC,KAAA,GACAzB,MAAM,c,yHAchB,SACE0B,KAAM,YACNC,QAAO,WACLC,KAAKC,cACP,EACAC,MAAK,WACH,IAAMC,GAASC,EAAAA,EAAAA,MAETC,GAAKC,EAAAA,EAAAA,KAELtB,GAAQuB,EAAAA,EAAAA,IAAI,MACZf,GAAWe,EAAAA,EAAAA,IAAI,MAErB,MAAO,CACLvB,MAAAA,EACAQ,SAAAA,EAEMd,SAAQ,WAAG,OAAA8B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACE,OAAjBX,EAAGY,QAAQC,OAAMJ,EAAAE,KAAA,GACMG,EAAAA,EAAAA,IAAM,CAC3BnC,MAAOA,EAAMoC,MACb5B,SAAUA,EAAS4B,QACnB,OACe,GAJXR,EAAOE,EAAAO,KAIbhB,EAAGY,QAAQK,QAEPV,EAASW,MAAO,CAAFT,EAAAE,KAAA,QAChBX,EAAGmB,OAAO,CACR5B,MAAO,QACP6B,UAAW,QACXC,KAAM,UACNC,QAASf,EAASe,UAClBb,EAAAE,KAAA,gBASsB,OAPxBX,EAAGmB,OAAO,CACR5B,MAAO,UACP6B,UAAW,QACXC,KAAM,QACNC,QAAS,oBAGXC,EAAAA,EAAAA,IAAShB,EAASiB,OAAMf,EAAAE,KAAA,GAElBb,EAAO2B,KAAK,CAAEhC,KAAM,SAAS,yBAAAgB,EAAAiB,OAAA,GAAApB,EAAA,IAzBtBH,EA2BjB,EAEA5B,QAAO,WACLI,EAAMoC,MAAQ,KACd5B,EAAS4B,MAAQ,IACnB,EAEAnB,aAAY,WAC4B,MAAlCD,KAAKgC,OAAOC,MAAMC,aACpB7B,EAAGmB,OAAO,CACR5B,MAAO,QACP6B,UAAW,QACXC,KAAM,UACNC,QAAS,iCAGf,EAEJ,G,8DCxGF,MAAMQ,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,IAKA,IAAS,EAAQ,aAAc,CAACC,MAAK,WAAO,SAAK,K","sources":["webpack://app/./src/views/Login.vue","webpack://app/./src/views/Login.vue?d9b8"],"sourcesContent":["<template>\r\n  <div class=\"q-pa-md\" style=\"max-width: 400px; margin: auto\">\r\n    <q-form @submit=\"onSubmit\" @reset=\"onReset\" class=\"q-gutter-md\">\r\n      <q-input\r\n        for=\"login-email\"\r\n        filled\r\n        v-model=\"email\"\r\n        label=\"Login\"\r\n        hint=\"Email\"\r\n        lazy-rules\r\n        type=\"email\"\r\n        :rules=\"[(val) => (val && val.length > 0) || 'Please type your email']\"\r\n      />\r\n\r\n      <q-input\r\n        for=\"login-password\"\r\n        filled\r\n        type=\"password\"\r\n        v-model=\"password\"\r\n        label=\"Password\"\r\n        lazy-rules\r\n        :rules=\"[\r\n          (val) => (val !== null && val !== '') || 'Please type your password',\r\n        ]\"\r\n      />\r\n\r\n      <div>\r\n        <q-btn id=\"login-submit\" label=\"Submit\" type=\"submit\" color=\"primary\" />\r\n        <q-btn\r\n          label=\"Reset\"\r\n          type=\"reset\"\r\n          color=\"primary\"\r\n          flat\r\n          class=\"q-ml-sm\"\r\n        />\r\n      </div>\r\n    </q-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { axiosInstance, login } from \"@/services/auth.service\";\r\nimport { setToken } from \"@/services/helpers\";\r\nimport { useQuasar } from \"quasar\";\r\nimport { ref } from \"vue\";\r\nimport { useRouter } from \"vue-router\";\r\n\r\nexport default {\r\n  name: \"LoginView\",\r\n  mounted() {\r\n    this.onLoginError();\r\n  },\r\n  setup() {\r\n    const router = useRouter();\r\n\r\n    const $q = useQuasar();\r\n\r\n    const email = ref(null);\r\n    const password = ref(null);\r\n\r\n    return {\r\n      email,\r\n      password,\r\n\r\n      async onSubmit() {\r\n        $q.loading.show();\r\n        const response = await login({\r\n          email: email.value,\r\n          password: password.value,\r\n        });\r\n        $q.loading.hide();\r\n\r\n        if (response.error) {\r\n          $q.notify({\r\n            color: \"red-4\",\r\n            textColor: \"white\",\r\n            icon: \"warning\",\r\n            message: response.message,\r\n          });\r\n        } else {\r\n          $q.notify({\r\n            color: \"green-4\",\r\n            textColor: \"white\",\r\n            icon: \"check\",\r\n            message: \"Login correcto\",\r\n          });\r\n\r\n          setToken(response.token);\r\n\r\n          await router.push({ name: \"home\" });\r\n        }\r\n      },\r\n\r\n      onReset() {\r\n        email.value = null;\r\n        password.value = null;\r\n      },\r\n\r\n      onLoginError() {\r\n        if (this.$route.query.login_error === \"1\") {\r\n          $q.notify({\r\n            color: \"red-4\",\r\n            textColor: \"white\",\r\n            icon: \"warning\",\r\n            message: \"Please enter your credentials\",\r\n          });\r\n        }\r\n      },\r\n    };\r\n  },\r\n};\r\n</script>","import { render } from \"./Login.vue?vue&type=template&id=178e2de2\"\nimport script from \"./Login.vue?vue&type=script&lang=js\"\nexport * from \"./Login.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__\nimport QForm from 'quasar/src/components/form/QForm.js';\nimport QInput from 'quasar/src/components/input/QInput.js';\nimport QBtn from 'quasar/src/components/btn/QBtn.js';\nimport qInstall from \"../../node_modules/vue-cli-plugin-quasar/lib/runtime.auto-import.js\";\nqInstall(script, 'components', {QForm,QInput,QBtn});\n"],"names":["class","style","_createElementBlock","_hoisted_1","_createVNode","_component_q_form","onSubmit","$setup","onReset","_component_q_input","for","filled","email","$event","label","hint","type","rules","val","length","password","_createElementVNode","_component_q_btn","id","color","flat","name","mounted","this","onLoginError","setup","router","useRouter","$q","useQuasar","ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","loading","show","login","value","sent","hide","error","notify","textColor","icon","message","setToken","token","push","stop","$route","query","login_error","__exports__","render","QForm"],"sourceRoot":""}